This directory contains some useful files and code.
Unlike the code in ../src, everything here is in the public domain.

bin2c.c
	This program converts files to byte arrays that are automatically run
	with lua_dobuffer. This allows C programs to include all necessary Lua
	code, even in precompiled form. Even if the code is included in source
	form, bin2c is useful because it avoids the hassle of having to quote
	special characters in C strings.
	Example of usage: Run bin2c file1 file2 ... > init.h. Then, in your
	C program, just do #include "init.h" anywhere in the *body* of a
	function. This will be equivalent to calling
		lua_dofile(L,"file1"); lua_dofile(L,"file2"); ...
	Note that the Lua state is called "L". If you use a different name,
	say "mystate", just #define L mystate before you #include "init.h".

compat.lua
	A compatibility module for Lua 4.0 functions.

doall.lua
	Emulate the command line behaviour of Lua 4.0

lua.ico
	A Lua icon for Windows.
	Drawn by hand by Markus Gritsch <gritsch@iue.tuwien.ac.at>.

lua.magic
	Data for teaching file(1) about Lua precompiled chunks.

lua.xpm
	The same icon as lua.ico, but in XPM format.
	It was converted with ImageMagick by Andy Tai <andy@exp.com>.

luser_number.h
	Number type configuration for Lua core.

luser_tests.h
	Self-test configuration for Lua core.

min.c
	A minimal Lua interpreter.
	Good for learning and for starting your own.

noparser.c
	Linking with noparser.o avoids loading the parsing modules in lualib.a.
	Do "make luab" to build a sample Lua intepreter that does not parse
	Lua programs, only loads precompiled programs.

saconfig.c
	Configuration for Lua interpreter.

trace.c
	A simple execution tracer.
	An example of how to use the debug hooks in C.
